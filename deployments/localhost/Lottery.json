{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "VRFCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "LotteryState",
          "type": "uint256"
        }
      ],
      "name": "Lottery_UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransactionFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryStateNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "notEnoughFee",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "EnterLottery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "winnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.lotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c70abc57b9e4c12d44f82daf16f4be35aec940624031c6507fa8a7565f49b47",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1219911",
    "logsBloom": "0x
    "blockHash": "0xb2cc9bb7162f90846527364d9ba63e20215dd44599f562ab9199d3a392f95241",
    "transactionHash": "0x7c70abc57b9e4c12d44f82daf16f4be35aec940624031c6507fa8a7565f49b47",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1219911",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "500000",
    "1",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "ed7218738bcd77fff9ddbf0e02168646",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"VRFCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"LotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery_UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryStateNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notEnoughFee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"EnterLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.lotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is checkUpkeep function and this is used to keep a watch on the blockchain to triger a particular action after a particular condition is fulfilled here all the given condition must be fulfilled so that it returns a bool which will tell the  performUpkeeep function to triger\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identifier:MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\"; \\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\n\\r\\n    error notEnoughFee(); //Error are like custom error handlers in java\\r\\n    error TransactionFailed();\\r\\n    error lotteryStateNotOpen();\\r\\n    error Lottery_UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 LotteryState);\\r\\ncontract Lottery is VRFConsumerBaseV2, AutomationCompatibleInterface {\\r\\n    enum lotteryState{\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n    \\r\\n    uint256 private immutable i_entranceFee; //Making varibales immutable reduced gas fee\\r\\n    address payable[] private s_players; // Array of payable address as one of the address will win and we will have to pay him/her.\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    //lOTTERY VARIABLES\\r\\n    address private s_recentWinner;\\r\\n    lotteryState private s_lotteryState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n\\r\\n    VRFCoordinatorV2Interface private immutable i_VRFCoordinator;\\r\\n\\r\\n\\r\\n\\r\\n    event EnterLottery(address indexed player);\\r\\n    event winnerPicked(address indexed player);\\r\\n\\r\\n    constructor(\\r\\n        address VRFCoordinatorV2,\\r\\n        uint256 _entranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint64 subscriptionId,\\r\\n        uint256 interval) VRFConsumerBaseV2(VRFCoordinatorV2) {\\r\\n        i_VRFCoordinator = VRFCoordinatorV2Interface(VRFCoordinatorV2);\\r\\n        i_entranceFee = _entranceFee;\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_lotteryState = lotteryState.OPEN;\\r\\n        i_interval = interval ;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n\\r\\n    }\\r\\n\\r\\n    function enterLottery() public payable //\\r\\n    {\\r\\n        s_lotteryState = lotteryState.OPEN;\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert notEnoughFee();\\r\\n        }\\r\\n        if(s_lotteryState != lotteryState.OPEN)\\r\\n        {\\r\\n            revert lotteryStateNotOpen();   \\r\\n        }\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit EnterLottery(msg.sender); //We are storing address of player in logs\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /*performData*/) external override  {\\r\\n        (bool UpkeepNeeded, )= checkUpkeep(\\\"\\\");\\r\\n         if (!UpkeepNeeded) {\\r\\n            revert Lottery_UpkeepNotNeeded(\\r\\n                address(this).balance,\\r\\n                s_players.length,\\r\\n                uint256(s_lotteryState)\\r\\n            );}\\r\\n         s_lotteryState = lotteryState(1);\\r\\n        uint256 requestId = i_VRFCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATIONS,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n    }\\r\\n    /** \\r\\n     *@dev This is checkUpkeep function and this is used to keep a watch on the blockchain to triger a particular action after\\r\\n     a particular condition is fulfilled here all the given condition must be fulfilled so that it returns a bool which will tell the \\r\\n     performUpkeeep function to triger\\r\\n    */\\r\\n   \\r\\n    function checkUpkeep ( bytes memory /*heckData*/ ) public view override returns (bool upkeepNeeded, bytes memory /*performData*/) {\\r\\n        bool isOpen = lotteryState.OPEN == s_lotteryState;\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n        bool hasPlayers = s_players.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256, uint256[] memory randomWords) internal override {\\r\\n         s_lotteryState = lotteryState(1);\\r\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n        address payable recentWinner = s_players[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lotteryState = lotteryState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert TransactionFailed();\\r\\n        }\\r\\n        emit winnerPicked(recentWinner);\\r\\n    }\\r\\n\\r\\n    function getWinner() private view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n      function getLotteryState() public view returns (lotteryState) {\\r\\n        return s_lotteryState;\\r\\n    }\\r\\n    function getNumWords() public pure returns (uint256)\\r\\n    {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n    \\r\\n     function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n     function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n    function getRequestConfirmations() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATIONS;\\r\\n    }\\r\\n    function getLastTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n  \\r\\n}\\r\\n\\r\\n    \",\"keccak256\":\"0xbc8333474333d061f36586273112e31490afdd435a43b1e708aa24d0a5ef9dff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200184e3803806200184e833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff16815250508460a081815250508360e081815250508167ffffffffffffffff1660c08167ffffffffffffffff16815250508263ffffffff166101008163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550806101208181525050426002819055505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600063ffffffff82169050919050565b62000229816200020e565b81146200023557600080fd5b50565b60008151905062000249816200021e565b92915050565b600067ffffffffffffffff82169050919050565b6200026e816200024f565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a0162000238565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161147f620003cf60003960006104a701526000818161065301526106c101526000610527015260006104e3015260006105040152600081816102fa01526107120152600081816103200152610374015261147f6000f3fe6080604052600436106100c25760003560e01c80636b68c03c1161007f578063c1af578511610059578063c1af578514610259578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80636b68c03c146101c55780636e04ff0d146101f057806391ad27b41461022e576100c2565b806309bc33a7146100c75780631fe543e3146100f25780634585e33b1461011b578063473f1ddc1461014457806353a2c19a1461016f5780635f1b0fd81461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c09565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610dbd565b61031e565b005b34801561012757600080fd5b50610142600480360381019061013d9190610e74565b6103de565b005b34801561015057600080fd5b506101596105b3565b6040516101669190610f02565b60405180910390f35b34801561017b57600080fd5b506101846105dd565b6040516101919190610c09565b60405180910390f35b3480156101a657600080fd5b506101af6105ec565b6040516101bc9190610c09565b60405180910390f35b3480156101d157600080fd5b506101da6105f9565b6040516101e79190610f94565b60405180910390f35b3480156101fc57600080fd5b5061021760048036038101906102129190611064565b610610565b604051610225929190611147565b60405180910390f35b34801561023a57600080fd5b506102436106bd565b6040516102509190610c09565b60405180910390f35b6102616106e5565b005b34801561026f57600080fd5b5061027861087f565b6040516102859190610c09565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611177565b610889565b6040516102c29190610f02565b60405180910390f35b3480156102d757600080fd5b506102e06108d0565b6040516102ed9190610c09565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c79291906111a4565b60405180910390fd5b6103da82826108dc565b5050565b60006103f860405180602001604052806000815250610610565b509050806104675747600080549050600160149054906101000a900460ff16600181111561042957610428610f1d565b5b6040517f6f118e9000000000000000000000000000000000000000000000000000000000815260040161045e939291906111cd565b60405180910390fd5b60018081111561047a57610479610f1d565b5b600160146101000a81548160ff0219169083600181111561049e5761049d610f1d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161056895949392919061127c565b6020604051808303816000875af1158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab91906112e4565b905050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff16600181111561063857610637610f1d565b5b6000600181111561064c5761064b610f1d565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106809190611340565b119050600080600080549050119050600080471190508280156106a05750835b80156106a95750805b80156106b25750815b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160146101000a81548160ff0219169083600181111561070b5761070a610f1d565b5b02179055507f000000000000000000000000000000000000000000000000000000000000000034101561076a576040517ff3f9345600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561077e5761077d610f1d565b5b600160149054906101000a900460ff1660018111156107a05761079f610f1d565b5b146107d7576040517ff179f8cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fde7ffaf8976e3b39d4fb74cd196ccae530bbcc6539e8f8e5db2cc61ef21b9ac260405160405180910390a2565b6000600254905090565b600080828154811061089e5761089d611374565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6001808111156108ef576108ee610f1d565b5b600160146101000a81548160ff0219169083600181111561091357610912610f1d565b5b0217905550600080805490508260008151811061093357610932611374565b5b602002602001015161094591906113d2565b9050600080828154811061095c5761095b611374565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109e5576109e4610c7a565b5b604051908082528060200260200182016040528015610a135781602001602082028036833780820191505090505b5060009080519060200190610a29929190610b49565b506000600160146101000a81548160ff02191690836001811115610a5057610a4f610f1d565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a8290611434565b60006040518083038185875af1925050503d8060008114610abf576040519150601f19603f3d011682016040523d82523d6000602084013e610ac4565b606091505b5050905080610aff576040517fbf961a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc2579160200282015b82811115610bc15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b69565b5b509050610bcf9190610bd3565b5090565b5b80821115610bec576000816000905550600101610bd4565b5090565b6000819050919050565b610c0381610bf0565b82525050565b6000602082019050610c1e6000830184610bfa565b92915050565b6000604051905090565b600080fd5b600080fd5b610c4181610bf0565b8114610c4c57600080fd5b50565b600081359050610c5e81610c38565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cb282610c69565b810181811067ffffffffffffffff82111715610cd157610cd0610c7a565b5b80604052505050565b6000610ce4610c24565b9050610cf08282610ca9565b919050565b600067ffffffffffffffff821115610d1057610d0f610c7a565b5b602082029050602081019050919050565b600080fd5b6000610d39610d3484610cf5565b610cda565b90508083825260208201905060208402830185811115610d5c57610d5b610d21565b5b835b81811015610d855780610d718882610c4f565b845260208401935050602081019050610d5e565b5050509392505050565b600082601f830112610da457610da3610c64565b5b8135610db4848260208601610d26565b91505092915050565b60008060408385031215610dd457610dd3610c2e565b5b6000610de285828601610c4f565b925050602083013567ffffffffffffffff811115610e0357610e02610c33565b5b610e0f85828601610d8f565b9150509250929050565b600080fd5b60008083601f840112610e3457610e33610c64565b5b8235905067ffffffffffffffff811115610e5157610e50610e19565b5b602083019150836001820283011115610e6d57610e6c610d21565b5b9250929050565b60008060208385031215610e8b57610e8a610c2e565b5b600083013567ffffffffffffffff811115610ea957610ea8610c33565b5b610eb585828601610e1e565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eec82610ec1565b9050919050565b610efc81610ee1565b82525050565b6000602082019050610f176000830184610ef3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f5d57610f5c610f1d565b5b50565b6000819050610f6e82610f4c565b919050565b6000610f7e82610f60565b9050919050565b610f8e81610f73565b82525050565b6000602082019050610fa96000830184610f85565b92915050565b600080fd5b600067ffffffffffffffff821115610fcf57610fce610c7a565b5b610fd882610c69565b9050602081019050919050565b82818337600083830152505050565b600061100761100284610fb4565b610cda565b90508281526020810184848401111561102357611022610faf565b5b61102e848285610fe5565b509392505050565b600082601f83011261104b5761104a610c64565b5b813561105b848260208601610ff4565b91505092915050565b60006020828403121561107a57611079610c2e565b5b600082013567ffffffffffffffff81111561109857611097610c33565b5b6110a484828501611036565b91505092915050565b60008115159050919050565b6110c2816110ad565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111025780820151818401526020810190506110e7565b60008484015250505050565b6000611119826110c8565b61112381856110d3565b93506111338185602086016110e4565b61113c81610c69565b840191505092915050565b600060408201905061115c60008301856110b9565b818103602083015261116e818461110e565b90509392505050565b60006020828403121561118d5761118c610c2e565b5b600061119b84828501610c4f565b91505092915050565b60006040820190506111b96000830185610ef3565b6111c66020830184610ef3565b9392505050565b60006060820190506111e26000830186610bfa565b6111ef6020830185610bfa565b6111fc6040830184610bfa565b949350505050565b6000819050919050565b61121781611204565b82525050565b600067ffffffffffffffff82169050919050565b61123a8161121d565b82525050565b600061ffff82169050919050565b61125781611240565b82525050565b600063ffffffff82169050919050565b6112768161125d565b82525050565b600060a082019050611291600083018861120e565b61129e6020830187611231565b6112ab604083018661124e565b6112b8606083018561126d565b6112c5608083018461126d565b9695505050505050565b6000815190506112de81610c38565b92915050565b6000602082840312156112fa576112f9610c2e565b5b6000611308848285016112cf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061134b82610bf0565b915061135683610bf0565b925082820390508181111561136e5761136d611311565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113dd82610bf0565b91506113e883610bf0565b9250826113f8576113f76113a3565b5b828206905092915050565b600081905092915050565b50565b600061141e600083611403565b91506114298261140e565b600082019050919050565b600061143f82611411565b915081905091905056fea264697066735822122054ba2e2fc4dea13f54974f9c247e0836ccce4f8351e4deaf070af1617e0ae47a64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80636b68c03c1161007f578063c1af578511610059578063c1af578514610259578063c1c244e814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80636b68c03c146101c55780636e04ff0d146101f057806391ad27b41461022e576100c2565b806309bc33a7146100c75780631fe543e3146100f25780634585e33b1461011b578063473f1ddc1461014457806353a2c19a1461016f5780635f1b0fd81461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c09565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610dbd565b61031e565b005b34801561012757600080fd5b50610142600480360381019061013d9190610e74565b6103de565b005b34801561015057600080fd5b506101596105b3565b6040516101669190610f02565b60405180910390f35b34801561017b57600080fd5b506101846105dd565b6040516101919190610c09565b60405180910390f35b3480156101a657600080fd5b506101af6105ec565b6040516101bc9190610c09565b60405180910390f35b3480156101d157600080fd5b506101da6105f9565b6040516101e79190610f94565b60405180910390f35b3480156101fc57600080fd5b5061021760048036038101906102129190611064565b610610565b604051610225929190611147565b60405180910390f35b34801561023a57600080fd5b506102436106bd565b6040516102509190610c09565b60405180910390f35b6102616106e5565b005b34801561026f57600080fd5b5061027861087f565b6040516102859190610c09565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611177565b610889565b6040516102c29190610f02565b60405180910390f35b3480156102d757600080fd5b506102e06108d0565b6040516102ed9190610c09565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c79291906111a4565b60405180910390fd5b6103da82826108dc565b5050565b60006103f860405180602001604052806000815250610610565b509050806104675747600080549050600160149054906101000a900460ff16600181111561042957610428610f1d565b5b6040517f6f118e9000000000000000000000000000000000000000000000000000000000815260040161045e939291906111cd565b60405180910390fd5b60018081111561047a57610479610f1d565b5b600160146101000a81548160ff0219169083600181111561049e5761049d610f1d565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161056895949392919061127c565b6020604051808303816000875af1158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab91906112e4565b905050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff16600181111561063857610637610f1d565b5b6000600181111561064c5761064b610f1d565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426106809190611340565b119050600080600080549050119050600080471190508280156106a05750835b80156106a95750805b80156106b25750815b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160146101000a81548160ff0219169083600181111561070b5761070a610f1d565b5b02179055507f000000000000000000000000000000000000000000000000000000000000000034101561076a576040517ff3f9345600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561077e5761077d610f1d565b5b600160149054906101000a900460ff1660018111156107a05761079f610f1d565b5b146107d7576040517ff179f8cb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fde7ffaf8976e3b39d4fb74cd196ccae530bbcc6539e8f8e5db2cc61ef21b9ac260405160405180910390a2565b6000600254905090565b600080828154811061089e5761089d611374565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b6001808111156108ef576108ee610f1d565b5b600160146101000a81548160ff0219169083600181111561091357610912610f1d565b5b0217905550600080805490508260008151811061093357610932611374565b5b602002602001015161094591906113d2565b9050600080828154811061095c5761095b611374565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109e5576109e4610c7a565b5b604051908082528060200260200182016040528015610a135781602001602082028036833780820191505090505b5060009080519060200190610a29929190610b49565b506000600160146101000a81548160ff02191690836001811115610a5057610a4f610f1d565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a8290611434565b60006040518083038185875af1925050503d8060008114610abf576040519150601f19603f3d011682016040523d82523d6000602084013e610ac4565b606091505b5050905080610aff576040517fbf961a2800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610bc2579160200282015b82811115610bc15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b69565b5b509050610bcf9190610bd3565b5090565b5b80821115610bec576000816000905550600101610bd4565b5090565b6000819050919050565b610c0381610bf0565b82525050565b6000602082019050610c1e6000830184610bfa565b92915050565b6000604051905090565b600080fd5b600080fd5b610c4181610bf0565b8114610c4c57600080fd5b50565b600081359050610c5e81610c38565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cb282610c69565b810181811067ffffffffffffffff82111715610cd157610cd0610c7a565b5b80604052505050565b6000610ce4610c24565b9050610cf08282610ca9565b919050565b600067ffffffffffffffff821115610d1057610d0f610c7a565b5b602082029050602081019050919050565b600080fd5b6000610d39610d3484610cf5565b610cda565b90508083825260208201905060208402830185811115610d5c57610d5b610d21565b5b835b81811015610d855780610d718882610c4f565b845260208401935050602081019050610d5e565b5050509392505050565b600082601f830112610da457610da3610c64565b5b8135610db4848260208601610d26565b91505092915050565b60008060408385031215610dd457610dd3610c2e565b5b6000610de285828601610c4f565b925050602083013567ffffffffffffffff811115610e0357610e02610c33565b5b610e0f85828601610d8f565b9150509250929050565b600080fd5b60008083601f840112610e3457610e33610c64565b5b8235905067ffffffffffffffff811115610e5157610e50610e19565b5b602083019150836001820283011115610e6d57610e6c610d21565b5b9250929050565b60008060208385031215610e8b57610e8a610c2e565b5b600083013567ffffffffffffffff811115610ea957610ea8610c33565b5b610eb585828601610e1e565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610eec82610ec1565b9050919050565b610efc81610ee1565b82525050565b6000602082019050610f176000830184610ef3565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f5d57610f5c610f1d565b5b50565b6000819050610f6e82610f4c565b919050565b6000610f7e82610f60565b9050919050565b610f8e81610f73565b82525050565b6000602082019050610fa96000830184610f85565b92915050565b600080fd5b600067ffffffffffffffff821115610fcf57610fce610c7a565b5b610fd882610c69565b9050602081019050919050565b82818337600083830152505050565b600061100761100284610fb4565b610cda565b90508281526020810184848401111561102357611022610faf565b5b61102e848285610fe5565b509392505050565b600082601f83011261104b5761104a610c64565b5b813561105b848260208601610ff4565b91505092915050565b60006020828403121561107a57611079610c2e565b5b600082013567ffffffffffffffff81111561109857611097610c33565b5b6110a484828501611036565b91505092915050565b60008115159050919050565b6110c2816110ad565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111025780820151818401526020810190506110e7565b60008484015250505050565b6000611119826110c8565b61112381856110d3565b93506111338185602086016110e4565b61113c81610c69565b840191505092915050565b600060408201905061115c60008301856110b9565b818103602083015261116e818461110e565b90509392505050565b60006020828403121561118d5761118c610c2e565b5b600061119b84828501610c4f565b91505092915050565b60006040820190506111b96000830185610ef3565b6111c66020830184610ef3565b9392505050565b60006060820190506111e26000830186610bfa565b6111ef6020830185610bfa565b6111fc6040830184610bfa565b949350505050565b6000819050919050565b61121781611204565b82525050565b600067ffffffffffffffff82169050919050565b61123a8161121d565b82525050565b600061ffff82169050919050565b61125781611240565b82525050565b600063ffffffff82169050919050565b6112768161125d565b82525050565b600060a082019050611291600083018861120e565b61129e6020830187611231565b6112ab604083018661124e565b6112b8606083018561126d565b6112c5608083018461126d565b9695505050505050565b6000815190506112de81610c38565b92915050565b6000602082840312156112fa576112f9610c2e565b5b6000611308848285016112cf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061134b82610bf0565b915061135683610bf0565b925082820390508181111561136e5761136d611311565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113dd82610bf0565b91506113e883610bf0565b9250826113f8576113f76113a3565b5b828206905092915050565b600081905092915050565b50565b600061141e600083611403565b91506114298261140e565b600082019050919050565b600061143f82611411565b915081905091905056fea264697066735822122054ba2e2fc4dea13f54974f9c247e0836ccce4f8351e4deaf070af1617e0ae47a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is checkUpkeep function and this is used to keep a watch on the blockchain to triger a particular action after a particular condition is fulfilled here all the given condition must be fulfilled so that it returns a bool which will tell the  performUpkeeep function to triger"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1161,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 1177,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1180,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(lotteryState)1156"
      },
      {
        "astId": 1182,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(lotteryState)1156": {
        "encoding": "inplace",
        "label": "enum Lottery.lotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}